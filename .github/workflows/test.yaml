name: Dev

on:
  workflow_dispatch:
  issue_comment:
    types: [ created ]

jobs:
  dispatch-gh:
    if: |
      (github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER') &&
      (github.event.issue.pull_request && contains(github.event.comment.body, '/werft run'))
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.comment-branch.outputs.head_ref }}
      run_url: ${{ steps.output.outputs.run_url }}
      run_id: ${{ steps.output.outputs.run_id }}
#      pr_number: ${{ github.event.issue.number }}
      recreate_vm: ${{ contains(github.event.comment.body, 'recreate-vm') }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
      - name: Detect PR
        id: outtest
        run: |
          echo 'test2'
          echo '# Direct access to common PR properties'
          echo 'prNumber: ${{ steps.PR.outputs.number }}'
          echo 'prUrl: ${{ steps.PR.outputs.pr_url }}'
          echo 'prTitle: ${{ steps.PR.outputs.pr_title }}'
          echo 'prBody: ${{ steps.PR.outputs.pr_body }}'
          echo 'prCreatedAt: ${{ steps.PR.outputs.pr_created_at }}'
          echo 'prMergedAt: ${{ steps.PR.outputs.pr_merged_at }}'
          echo 'prClosedAt: ${{ steps.PR.outputs.pr_closed_at }}'
          echo 'prLabel: ${{ steps.PR.outputs.pr_labels }}'
      - name: Test
        id: testoutput
        run: |
          echo "test test"
          echo ${{ github.action_repository }}
      - name: Trigger Workflow
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'dispatch.yaml',
              ref: '${{ steps.comment-branch.outputs.head_ref }}',
              inputs: {
                "recreate_vm": '${{ contains(github.event.comment.body, '[x] /werft recreate-vm') }}'
              }
            })
      - name: Get run URL
        id: output
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sleep 5
          url=$(gh run list --repo vulkoingim/actions-test --workflow dispatch.yaml -b ${{ steps.comment-branch.outputs.head_ref }} --json event,url,status -q '[.[] | select(.event=="workflow_dispatch") | select(.status!="completed").url][0]')
          {
            echo "run_url=${url}"
            echo "run_id=${url##*/}"
          } >> $GITHUB_OUTPUT

  comment:
    runs-on: ubuntu-latest
    needs: [ dispatch-gh ]
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `#### Comment triggered a workflow run
            
              Started workflow run: [${{ needs.dispatch-gh.outputs.run_id }}](${{ needs.dispatch-gh.outputs.run_url }}) 
              * \`recreate_vm: ${{ needs.dispatch-gh.outputs.recreate_vm }}\``
            })
#              body: '\n '
#            })

#            gh run list --workflow dispatch.yaml -b test --json event,headSha,url,status -q '[.[] | select(.event=="workflow_dispatch") | select(.status!="completed").url][0]'
#            [.[] | select(.event=="workflow_dispatch") | select(.status!="completed").url][0]

# https://api.github.com/repos/vulkoingim/actions-test/issues/comments/COMMENT_ID
#      - name: "Create a check run"
#        uses: actions/github-script@v6
#        env:
#          parameter_url: '${{ github.event.workflow_run.html_url }}'
#        with:
#          debug: ${{ secrets.ACTIONS_STEP_DEBUG || false }}
#          script: |
#            // any JavaScript code can go here, you can use Node JS APIs too.
#            // Docs: https://docs.github.com/en/rest/checks/runs#create-a-check-run
#            // Rest: https://octokit.github.io/rest.js/v18#checks-create
#            await github.rest.checks.create({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              head_sha: context.sha,
#              name: "my-check-name",
#              status: "completed",
#              // Careful, code injection can happen.
#              conclusion: "${{ github.event.workflow_run.conclusion }}",
#              // This is safe, not string interpolation.
#              details_url: process.env.parameter_url,
#              output: {
#                title: "my check title",
#                summary: "my *check* summary",
#                text: "my text",
#              },
#            });

#  dispatch:
#    uses: vulkoingim/actions-test/.github/workflows/dispatch.yaml@${{ needs.dispatch-gh.outputs.branch }}
#    with:
#      pr_description: ${{ github.event.pull_request.body || github.event.issue.body }}
